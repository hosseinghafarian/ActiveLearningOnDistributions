function [outp,selectedSamples]=sampleShow_old(figName,X,class,initL,showOptions)% Press enter when you are done, to add data sample user right mouse button% figName: title of plot window. % X      : data to show % class  : class of data% initL  : selected samples if any% showOptions: Options for sampleShow%   showOptions.clear : make screen Clear%   showOptions.acceptNewInstance: can we accept new instances%   showOptions.selectInstance   : select instance or not ?%   showOptions.isUpdate : true if we want to add a single point to the figure to showselectedSamples=[];if nargin < 4     if nargin==1         X=[];        y=[];        class=[];        initL=[];    end    showOptions.clear=true;    showOptions.acceptNewInstance=true;    showOptions.selectInstance = false;    showOptions.StopforKey     = true;    showOptions.isUpdate = false;    showOptions.onSpecificFigure=false;    showOptions.showContour = false;    showOptions.showIndex   = false;    %showOptions.model = model;% for showing contour    %showOptions.figureHandle=h;endif nargin == 7    close all;    h=gcf;endif showOptions.clear     clcend%figName='this is it';global typ  fig;fig=gcf;% set(fig,'Name',figName);% find tight axis% typ =1;% setWindowSettings(typ,fig);hold onbrdr= 1;[n,m]=size(X);if min(n,m) > 0    BoxXY.xmina=floor(min(X(1,:)))-brdr; %-4;    BoxXY.xmaxa=ceil(max(X(1,:)))+brdr;  % 4     BoxXY.ymina=floor(min(X(2,:)))-brdr; %-4     BoxXY.ymaxa=ceil(max(X(2,:)))+brdr;  % 4 else    BoxXY.xmina=-4;    BoxXY.xmaxa=4;     BoxXY.ymina=-4;     BoxXY.ymaxa=4;end    axis ([BoxXY.xmina BoxXY.xmaxa BoxXY.ymina BoxXY.ymaxa]);if showOptions.showContour   % doDemo(BoxXY,showOptions,X,class);endkey=1;if ~showOptions.isUpdate    if size(X,2)>0,showPoint(X(1,:)',X(2,:)',class,1),end;    type = 2*class;    XL1=X(1,initL)';    XL2=X(2,initL)';    TL=type(initL)';    showPoint(XL1,XL2,TL);else % update the last entry of initL    %t = size(initL,1);    type = 2*class;    XL1=X(1,initL)';    XL2=X(2,initL)';    TL=type(initL)';    showPoint(XL1,XL2,TL);endif showOptions.StopforKey     %compass;    list=[];    while (~ isempty(key))        [xt yt key]=ginput(1);          if (key==3)            if showOptions.selectInstance                PI = dsearchn(X',[xt,yt]);                list=[list;PI];                showPoint(X(1,PI),X(2,PI),2*class(PI));            else if showOptions.acceptNewInstance                    X(:,end+1)=[xt;yt];                    class(end+1)=typ-2;                    showPoint(X(1,end),X(2,end),class(end));                end            end                    end    end    selectedSamples=list;endoutp=[X;class];% send Row Vectors ( n * (2+1))endfunction changeType(obj,event)global typtyp=get(obj,'Value');endfunction changeAxis(obj,event)global fig;figure(fig);axis(str2num(get(obj,'String')));endfunction showPoint(x,y,typ,showIndex,t)        if nargin <= 3        showIndex = false;    else if nargin >4             inTex = num2str(t);                     end    end    if size(x,1)==1 && size(y,1)==1          showPointColor(typ,x,y);        if showIndex             text(x,y,inTex,'fontsize',7)        end        return    end    for i=1:size(x,1)        showPointColor(typ(i),x(i),y(i))        inTex = int2str(i);        if showIndex            text(x(i),y(i),inTex,'fontsize',7);        end    endendfunction setWindowSettings(typ,fig);       set(fig,'Position',[300 120 700 600]);    set(fig,'Resize','off');    hpop = uicontrol('Style', 'popup',...           'String', 'Class2|Unlabel|Class1|Type4',...           'Position', [180 538 100 50],...           'Callback', {@changeType});    hedit = uicontrol('Style', 'edit',...           'String', '[-5 5 -5 5]',...           'Position', [470 567 70 20],...           'Callback', {@changeAxis});    hlab1=uicontrol('Style', 'text',...           'String', 'Axis',...           'Position', [390 569 50 17]);endfunction doDemo(boxXY,showOptions,X,y)model   = showOptions.model;Options = showOptions.KOptions;ur = linspace(boxXY.xmina,boxXY.xmaxa,256) ;vr = linspace(boxXY.ymina,boxXY.ymaxa,256) ;[u,v] = meshgrid(ur,vr) ;X_dense = [u(:)' ; v(:)'] ;K_dense = KernelArray(false, X(:,model.svind),X_dense,Options,true);% K_dense = X(:,model.svind)' * X_dense ;f_dense = model.alphay(model.svind)' * K_dense + model.b ;f_dense = reshape(f_dense, size(u,1),size(u,2)) ;cla ;imagesc(ur,ur,f_dense) ; colormap cool ; hold on ;[c,hm] = contour(ur,ur,f_dense,[-1 -1]) ;set(hm,'color', 'r', 'linestyle', '--') ;[c,hp] = contour(ur,ur,f_dense,[+1 +1]) ;set(hp,'color', 'g', 'linestyle', '--') ;[c,hz] = contour(ur,ur,f_dense,[0 0]) ;set(hz,'color', 'b', 'linewidth', 4) ;hg  = plot(X(1,y>0), X(2,y>0), 'g.', 'markersize', 10) ;hr  = plot(X(1,y<0), X(2,y<0), 'r.', 'markersize', 10) ;hko = plot(X(1,model.svind), X(2,model.svind), 'ko', 'markersize', 5) ;hkx = plot(X(1,model.bndind), X(2,model.bndind), 'kx', 'markersize', 5) ;endfunction showPointColor(typ,x,y)    switch (typ)            case -2                plot(x,y,'r*', 'markersize', 20);            case -1  % Class 2 (-)                plot(x,y,'r.', 'markersize', 10);                            case 0   % Unlabeled data                plot(x,y,'b.','markersize',10);            case 1   % Class 1 (+)                plot(x,y, 'g.', 'markersize', 10);            case 2                   plot(x,y,'g+','markersize',20);            case 3                 plot(x,y,'* black');            otherwise                 disp('Error data type');        endend